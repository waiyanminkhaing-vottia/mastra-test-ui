name: Deploy Mastra Test Dashboard

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - production

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH for deployment
        run: |
          echo "Setting up SSH connection..."

          # Hardcoded connection details
          LIGHTSAIL_HOST="test.dev-maestra.vottia.me"
          LIGHTSAIL_USER="ec2-user"

          echo "Host: $LIGHTSAIL_HOST"
          echo "User: $LIGHTSAIL_USER"

          # Export for later steps
          echo "LIGHTSAIL_HOST=$LIGHTSAIL_HOST" >> $GITHUB_ENV
          echo "LIGHTSAIL_USER=$LIGHTSAIL_USER" >> $GITHUB_ENV

          # Setup SSH key
          mkdir -p ~/.ssh
          echo "${{ secrets.LIGHTSAIL_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Add host to known_hosts and test connection
          ssh-keyscan -H $LIGHTSAIL_HOST >> ~/.ssh/known_hosts
          ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no $LIGHTSAIL_USER@$LIGHTSAIL_HOST "echo 'SSH connection successful'"

      - name: Build and push Docker image
        run: |
          # Create a temporary script for the remote build
          cat << 'SCRIPT_EOF' > build_script.sh
          #!/bin/bash
          set -e

          echo "üèóÔ∏è Building Docker image on Lightsail instance..."

          # Ensure git is available
          if command -v git >/dev/null 2>&1; then
            GIT_CMD="git"
          elif [ -x /usr/bin/git ]; then
            GIT_CMD="/usr/bin/git"
          else
            echo "Installing git..."
            sudo dnf install -y git
            GIT_CMD="git"
          fi
          echo "‚úÖ Using git: $GIT_CMD"

          # Clone/update repository with authentication
          BRANCH="${{ github.ref_name }}"
          IMAGE_NAME="mastra-test-dashboard-${BRANCH}"

          echo "Deploying from branch: $BRANCH"
          echo "Image name: $IMAGE_NAME"

          # Clean up old images for this branch (keep latest 3)
          sudo docker images localhost:5000/$IMAGE_NAME --format "{{.ID}} {{.CreatedAt}}" | sort -k2 -r | tail -n +4 | awk '{print $1}' | xargs -r sudo docker rmi || true

          # Configure git with token authentication
          echo "Configuring git authentication..."

          # Test token with GitHub API first
          echo "Testing token with GitHub API..."
          if curl -s -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/user | grep -q '"login"'; then
            echo "‚úÖ Token is valid for API access"
          else
            echo "‚ùå Token failed API test"
            exit 1
          fi

          # Configure git to use the token directly for GitHub
          $GIT_CMD config --global credential.helper store
          echo "https://$GITHUB_TOKEN:x-oauth-basic@github.com" > ~/.git-credentials

          # Alternative: Set git config for URL rewriting
          $GIT_CMD config --global url."https://$GITHUB_TOKEN:x-oauth-basic@github.com/".insteadOf "https://github.com/"

          if [ -d "/tmp/mastra-test-dashboard" ]; then
            cd /tmp/mastra-test-dashboard
            $GIT_CMD fetch "https://$GITHUB_TOKEN:x-oauth-basic@github.com/waiyanminkhaing-vottia/mastra-test-dashboard.git"
            $GIT_CMD checkout $BRANCH
            $GIT_CMD pull "https://$GITHUB_TOKEN:x-oauth-basic@github.com/waiyanminkhaing-vottia/mastra-test-dashboard.git" $BRANCH
          else
            cd /tmp
            $GIT_CMD clone -b $BRANCH "https://$GITHUB_TOKEN:x-oauth-basic@github.com/waiyanminkhaing-vottia/mastra-test-dashboard.git"
            cd mastra-test-dashboard
          fi

          # Clean up credentials
          rm -f ~/.git-credentials

          # Set environment file based on manual input
          ENV_FILE="${{ github.event.inputs.environment }}"
          echo "Using environment: $ENV_FILE"

          # Check if env file exists (without exposing contents)
          echo "üîç Checking environment file: .env.$ENV_FILE"
          if [ -f ".env.$ENV_FILE" ]; then
            echo "‚úÖ Found .env.$ENV_FILE"
            echo "üìÑ File size: $(wc -l < ".env.$ENV_FILE") lines"
          else
            echo "‚ùå .env.$ENV_FILE not found!"
            echo "üìÅ Available files:"
            ls -la .env*
          fi

          # Copy environment file to deployment location
          sudo mkdir -p /opt/mastra-test-dashboard
          sudo cp ".env.$ENV_FILE" "/opt/mastra-test-dashboard/.env.$ENV_FILE"

          # Verify copied file (without exposing contents)
          echo "üîç Verifying copied file:"
          if [ -f "/opt/mastra-test-dashboard/.env.$ENV_FILE" ]; then
            echo "‚úÖ Environment file copied successfully"
            echo "üìÑ File size: $(sudo wc -l < "/opt/mastra-test-dashboard/.env.$ENV_FILE") lines"
          else
            echo "‚ùå Failed to copy environment file"
            exit 1
          fi

          # Build and push image
          echo "Building Docker image..."

          # Get registry IP for tagging
          REGISTRY_IP=$(sudo docker inspect local-registry --format '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}')
          echo "Registry IP: $REGISTRY_IP"

          # Copy environment-specific file for build
          cp ".env.$ENV_FILE" .env.production

          # Verify build environment file
          echo "üîç Build environment file verified:"
          if [ -f ".env.production" ]; then
            echo "‚úÖ .env.production file ready for build"
            echo "üìÑ File size: $(wc -l < ".env.production") lines"
          else
            echo "‚ùå .env.production file missing for build"
            exit 1
          fi

          # Build image
          sudo docker build -t $IMAGE_NAME:latest .

          # Configure Docker to allow insecure registry
          echo "Configuring Docker daemon for insecure registry..."
          sudo mkdir -p /etc/docker
          echo '{
            "insecure-registries": ["'$REGISTRY_IP':5000"]
          }' | sudo tee /etc/docker/daemon.json

          # Restart Docker daemon to apply configuration
          sudo systemctl reload docker || sudo service docker restart
          sleep 10

          # Tag image for registry
          sudo docker tag $IMAGE_NAME:latest $REGISTRY_IP:5000/$IMAGE_NAME:latest

          # Push to local registry
          sudo docker push $REGISTRY_IP:5000/$IMAGE_NAME:latest

          echo "‚úÖ Image built and pushed: localhost:5000/$IMAGE_NAME:latest"
          SCRIPT_EOF

          # Copy script to remote and execute
          scp build_script.sh ${{ env.LIGHTSAIL_USER }}@${{ env.LIGHTSAIL_HOST }}:/tmp/
          ssh ${{ env.LIGHTSAIL_USER }}@${{ env.LIGHTSAIL_HOST }} \
            "chmod +x /tmp/build_script.sh && export GITHUB_TOKEN='${{ secrets.COMMON_ACCESS_TOKEN }}' && /tmp/build_script.sh"

      - name: Deploy application container
        run: |
          ssh ${{ env.LIGHTSAIL_USER }}@${{ env.LIGHTSAIL_HOST }} << 'EOF'
            echo "üöÄ Deploying Mastra Test Dashboard..."

            # Ensure Docker network exists
            sudo docker network create mastra-test-network --driver bridge 2>/dev/null || true

            CONTAINER_NAME="mastra-test-dashboard"

            # Store current image for rollback
            CURRENT_IMAGE=$(sudo docker inspect $CONTAINER_NAME --format='{{.Image}}' 2>/dev/null || echo "none")
            echo "Current image: $CURRENT_IMAGE"

            # Stop and remove existing container
            sudo docker stop $CONTAINER_NAME 2>/dev/null || true
            sudo docker rm $CONTAINER_NAME 2>/dev/null || true

            # Set environment file based on manual input
            ENV_FILE="${{ github.event.inputs.environment }}"
            BRANCH="${{ github.ref_name }}"
            PORT=3000

            # Create image name with branch
            IMAGE_NAME="mastra-test-dashboard-${BRANCH}"

            echo "Using environment: $ENV_FILE"
            echo "Using branch: $BRANCH"
            echo "Using port: $PORT"
            echo "Container name: $CONTAINER_NAME"
            echo "Image name: $IMAGE_NAME"

            # Get registry container IP from network
            REGISTRY_IP=$(sudo docker inspect local-registry --format '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}')
            echo "Using registry at: $REGISTRY_IP:5000"

            # Debug: Check environment file before deployment (safe variables only)
            echo "üîç Environment file for container (non-sensitive vars only):"
            sudo grep -E "^(LOG_LEVEL|NODE_ENV)" "/opt/mastra-test-dashboard/.env.$ENV_FILE" || echo "No safe variables found"

            # Deploy container with environment-specific configuration
            echo "üöÄ Deploying dashboard with environment: $ENV_FILE on port: $PORT"

            if [ "$ENV_FILE" = "production" ]; then
              echo "üîí Using production deployment (environment variables only)"
              # Production: Use environment variables directly (no env files)
              sudo docker run -d \
                --name $CONTAINER_NAME \
                --network mastra-test-network \
                --restart unless-stopped \
                -p $PORT:$PORT \
                -e NODE_ENV=production \
                -e MASTRA_SERVER_URL=http://mastra-test:4000 \
                $REGISTRY_IP:5000/$IMAGE_NAME:latest
            else
              echo "üß™ Using development deployment (env file + overrides)"
              # Development: Use env file with production overrides
              sudo docker run -d \
                --name $CONTAINER_NAME \
                --network mastra-test-network \
                --restart unless-stopped \
                -p $PORT:$PORT \
                --env-file "/opt/mastra-test-dashboard/.env.$ENV_FILE" \
                -e NODE_ENV=production \
                $REGISTRY_IP:5000/$IMAGE_NAME:latest
            fi

            # Debug: Check safe environment variables in running container
            echo "üîç Safe environment variables in container:"
            sudo docker exec $CONTAINER_NAME env | grep -E "^(NODE_ENV|MASTRA_SERVER_URL)" | sort || echo "No safe env vars found"

            # Clean up old images (keep running container image)
            sudo docker images "*mastra-test-dashboard*" --format "{{.ID}} {{.CreatedAt}}" | sort -k2 -r | tail -n +3 | awk '{print $1}' | xargs -r sudo docker rmi || true

            echo "‚úÖ Application deployed successfully"
          EOF

      - name: Verify deployment
        run: |
          ssh ${{ env.LIGHTSAIL_USER }}@${{ env.LIGHTSAIL_HOST }} << 'EOF'
            echo "üîç Verifying deployment..."

            CONTAINER_NAME="mastra-test-dashboard"
            PORT=3000

            echo "Checking container status..."
            sudo docker ps | grep $CONTAINER_NAME

            echo "Checking container logs..."
            sudo docker logs $CONTAINER_NAME --tail=20

            echo "Waiting for application to be ready..."
            HEALTH_CHECK_PASSED=false

            # Set environment file based on manual input
            ENV_FILE="${{ github.event.inputs.environment }}"

            HEALTH_URL="http://localhost:$PORT"
            echo "üîç Using health check URL: $HEALTH_URL"

            # Check container status
            echo "üîç Container status:"
            sudo docker ps | grep $CONTAINER_NAME || echo "Container not found"

            # Wait for application to be ready
            for i in {1..30}; do
              if curl -sf "$HEALTH_URL" >/dev/null 2>&1; then
                echo "‚úÖ Application health check passed"
                HEALTH_CHECK_PASSED=true
                break
              else
                if [ $i -eq 1 ]; then
                  echo "‚è≥ Waiting for application to start..."
                elif [ $((i % 10)) -eq 0 ]; then
                  echo "‚è≥ Still waiting for application... ($i/30)"
                fi
                sleep 2
              fi
            done

            # Rollback if health check failed
            if [ "$HEALTH_CHECK_PASSED" = "false" ]; then
              echo "‚ùå Health check failed. Rolling back..."
              sudo docker stop $CONTAINER_NAME 2>/dev/null || true
              sudo docker rm $CONTAINER_NAME 2>/dev/null || true

              if [ "$CURRENT_IMAGE" != "none" ] && [ -n "$CURRENT_IMAGE" ]; then
                echo "üîÑ Restoring previous container with image: $CURRENT_IMAGE"

                if [ "$ENV_FILE" = "production" ]; then
                  sudo docker run -d \
                    --name $CONTAINER_NAME \
                    --network mastra-test-network \
                    --restart unless-stopped \
                    -p $PORT:$PORT \
                    -e NODE_ENV=production \
                    -e MASTRA_SERVER_URL=http://mastra-test:4000 \
                    $CURRENT_IMAGE
                else
                  sudo docker run -d \
                    --name $CONTAINER_NAME \
                    --network mastra-test-network \
                    --restart unless-stopped \
                    -p $PORT:$PORT \
                    --env-file "/opt/mastra-test-dashboard/.env.$ENV_FILE" \
                    -e NODE_ENV=production \
                    $CURRENT_IMAGE
                fi
                echo "üîÑ Rollback completed"
              else
                echo "‚ùå No previous image available for rollback (CURRENT_IMAGE: '$CURRENT_IMAGE')"
              fi
              exit 1
            fi

            echo "‚úÖ Deployment verification completed successfully"
          EOF