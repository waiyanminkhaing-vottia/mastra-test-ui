name: Deploy Mastra Test UI

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - production
      service:
        description: 'Service to deploy'
        required: true
        default: 'default'
        type: choice
        options:
          - default
          - fasthelp

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH for deployment
        run: |
          echo "Setting up SSH connection..."

          # Hardcoded connection details
          LIGHTSAIL_HOST="test.dev-maestra.vottia.me"
          LIGHTSAIL_USER="ec2-user"

          echo "Host: $LIGHTSAIL_HOST"
          echo "User: $LIGHTSAIL_USER"

          # Export for later steps
          echo "LIGHTSAIL_HOST=$LIGHTSAIL_HOST" >> $GITHUB_ENV
          echo "LIGHTSAIL_USER=$LIGHTSAIL_USER" >> $GITHUB_ENV

          # Setup SSH key
          mkdir -p ~/.ssh
          echo "${{ secrets.LIGHTSAIL_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Add host to known_hosts and test connection
          ssh-keyscan -H $LIGHTSAIL_HOST >> ~/.ssh/known_hosts
          ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no $LIGHTSAIL_USER@$LIGHTSAIL_HOST "echo 'SSH connection successful'"

      - name: Build and push Docker image
        run: |
          # Create a temporary script for the remote build
          cat << 'SCRIPT_EOF' > build_script.sh
          #!/bin/bash
          set -e

          echo "üèóÔ∏è Building Docker image on Lightsail instance..."

          # Ensure git is available
          if command -v git >/dev/null 2>&1; then
            GIT_CMD="git"
          elif [ -x /usr/bin/git ]; then
            GIT_CMD="/usr/bin/git"
          else
            echo "Installing git..."
            sudo dnf install -y git
            GIT_CMD="git"
          fi
          echo "‚úÖ Using git: $GIT_CMD"

          # Clean up old mastra-test-ui images (keep latest 3)
          sudo docker images localhost:5000/mastra-test-ui --format "{{.ID}} {{.CreatedAt}}" | sort -k2 -r | tail -n +4 | awk '{print $1}' | xargs -r sudo docker rmi || true

          # Clone/update repository with authentication
          BRANCH="${{ github.ref_name }}"
          SERVICE="${{ github.event.inputs.service }}"

          # Set port based on service
          if [ "$SERVICE" = "fasthelp" ]; then
            PORT=3002
          else
            PORT=3001
          fi

          echo "Deploying from branch: $BRANCH"
          echo "Service: $SERVICE"
          echo "Port: $PORT"

          # Configure git with token authentication
          echo "Configuring git authentication..."
          # Remove token logging for security

          # Test token with GitHub API first
          echo "Testing token with GitHub API..."
          if curl -s -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/user | grep -q '"login"'; then
            echo "‚úÖ Token is valid for API access"
          else
            echo "‚ùå Token failed API test"
            exit 1
          fi

          # Configure git to use the token directly for GitHub
          $GIT_CMD config --global credential.helper store
          echo "https://$GITHUB_TOKEN:x-oauth-basic@github.com" > ~/.git-credentials

          # Alternative: Set git config for URL rewriting
          $GIT_CMD config --global url."https://$GITHUB_TOKEN:x-oauth-basic@github.com/".insteadOf "https://github.com/"

          if [ -d "/tmp/mastra-test-ui" ]; then
            cd /tmp/mastra-test-ui
            # Stash any local changes to prevent merge conflicts
            $GIT_CMD stash push -m "Auto-stash before deployment $(date +%Y%m%d_%H%M%S)" || true
            $GIT_CMD fetch "https://$GITHUB_TOKEN:x-oauth-basic@github.com/waiyanminkhaing-vottia/mastra-test-ui.git"
            $GIT_CMD checkout $BRANCH
            $GIT_CMD pull "https://$GITHUB_TOKEN:x-oauth-basic@github.com/waiyanminkhaing-vottia/mastra-test-ui.git" $BRANCH
          else
            cd /tmp
            $GIT_CMD clone -b $BRANCH "https://$GITHUB_TOKEN:x-oauth-basic@github.com/waiyanminkhaing-vottia/mastra-test-ui.git"
            cd mastra-test-ui
          fi

          # Clean up credentials
          rm -f ~/.git-credentials

          # Set environment file based on manual input
          ENV_FILE="${{ github.event.inputs.environment }}"
          echo "Using environment: $ENV_FILE"

          # Check if env file exists (without exposing contents)
          echo "üîç Checking environment file: .env.$ENV_FILE"
          if [ -f ".env.$ENV_FILE" ]; then
            echo "‚úÖ Found .env.$ENV_FILE"
            echo "üìÑ File size: $(wc -l < ".env.$ENV_FILE") lines"
          else
            echo "‚ùå .env.$ENV_FILE not found!"
            echo "üìÅ Available files:"
            ls -la .env*
          fi

          # Copy environment file to deployment location
          sudo mkdir -p /opt/mastra-test-ui
          sudo cp ".env.$ENV_FILE" "/opt/mastra-test-ui/.env.$ENV_FILE"

          # Verify copied file (without exposing contents)
          echo "üîç Verifying copied file:"
          if [ -f "/opt/mastra-test-ui/.env.$ENV_FILE" ]; then
            echo "‚úÖ Environment file copied successfully"
            echo "üìÑ File size: $(sudo wc -l < "/opt/mastra-test-ui/.env.$ENV_FILE") lines"
          else
            echo "‚ùå Failed to copy environment file"
            exit 1
          fi

          # Build and push image
          echo "Building Docker image..."
          echo "$GITHUB_TOKEN" > /tmp/github_token

          # Get registry IP for tagging
          REGISTRY_IP=$(sudo docker inspect local-registry --format '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}')
          echo "Registry IP: $REGISTRY_IP"

          # Log environment being built
          echo "üîç Building for environment: '$ENV_FILE'"

          # Remove all .env files except the one we need
          # This prevents Next.js from detecting and using the wrong environment
          echo "üîç Removing other env files to prevent conflicts..."
          rm -f .env.local .env.example
          if [ "$ENV_FILE" != "development" ]; then
            rm -f .env.development
          fi
          if [ "$ENV_FILE" != "production" ]; then
            rm -f .env.production
          fi

          # Rename environment-specific file to .env for build
          mv ".env.$ENV_FILE" .env

          # Set NEXT_PUBLIC_BASE_PATH and MASTRA_SERVER_URL based on service
          if [ "$SERVICE" = "fasthelp" ]; then
            BASE_PATH="/fasthelp"
            MASTRA_SERVER_URL="http://localhost:4002"
          else
            BASE_PATH=""
            MASTRA_SERVER_URL="http://localhost:4001"
          fi

          # Update NEXT_PUBLIC_BASE_PATH in .env file
          echo "üîç Setting NEXT_PUBLIC_BASE_PATH='$BASE_PATH' for service: $SERVICE"
          if grep -q "^NEXT_PUBLIC_BASE_PATH=" .env; then
            # Replace existing NEXT_PUBLIC_BASE_PATH
            sed -i "s|^NEXT_PUBLIC_BASE_PATH=.*|NEXT_PUBLIC_BASE_PATH=$BASE_PATH|" .env
          else
            # Add NEXT_PUBLIC_BASE_PATH if it doesn't exist
            echo "NEXT_PUBLIC_BASE_PATH=$BASE_PATH" >> .env
          fi

          # Update MASTRA_SERVER_URL in .env file
          echo "üîç Setting MASTRA_SERVER_URL='$MASTRA_SERVER_URL' for service: $SERVICE"
          if grep -q "^MASTRA_SERVER_URL=" .env; then
            # Replace existing MASTRA_SERVER_URL
            sed -i "s|^MASTRA_SERVER_URL=.*|MASTRA_SERVER_URL=$MASTRA_SERVER_URL|" .env
          else
            # Add MASTRA_SERVER_URL if it doesn't exist
            echo "MASTRA_SERVER_URL=$MASTRA_SERVER_URL" >> .env
          fi

          # Verify build environment file
          echo "üîç Build environment file verified:"
          if [ -f ".env" ]; then
            echo "‚úÖ .env file ready for build (from $ENV_FILE)"
            echo "üìÑ File size: $(wc -l < ".env") lines"
            echo "üîç NEXT_PUBLIC_BASE_PATH: $(grep "^NEXT_PUBLIC_BASE_PATH=" .env || echo "not set")"
            echo "üîç MASTRA_SERVER_URL: $(grep "^MASTRA_SERVER_URL=" .env || echo "not set")"
            echo "üìÅ Remaining env files:"
            ls -la .env* 2>/dev/null || echo "Only .env exists"
          else
            echo "‚ùå .env file missing for build"
            exit 1
          fi

          # Build image using docker build with PORT argument
          # Next.js will read NEXT_PUBLIC_* variables from .env file
          sudo docker build \
            --build-arg PORT=$PORT \
            --secret id=github_token,src=/tmp/github_token \
            -t mastra-test-ui:$ENV_FILE-$SERVICE-latest \
            .

          # Configure Docker to allow insecure registry
          echo "Configuring Docker daemon for insecure registry..."
          sudo mkdir -p /etc/docker
          echo '{
            "insecure-registries": ["'$REGISTRY_IP':5000"]
          }' | sudo tee /etc/docker/daemon.json

          # Restart Docker daemon to apply configuration
          sudo systemctl reload docker || sudo service docker restart
          sleep 10

          # Tag image for registry
          sudo docker tag mastra-test-ui:$ENV_FILE-$SERVICE-latest $REGISTRY_IP:5000/mastra-test-ui:$ENV_FILE-$SERVICE-latest

          # Push to local registry
          sudo docker push $REGISTRY_IP:5000/mastra-test-ui:$ENV_FILE-$SERVICE-latest
          rm -f /tmp/github_token

          echo "‚úÖ Image built and pushed: localhost:5000/mastra-test-ui:$ENV_FILE-$SERVICE-latest"
          SCRIPT_EOF

          # Copy script to remote and execute
          scp build_script.sh ${{ env.LIGHTSAIL_USER }}@${{ env.LIGHTSAIL_HOST }}:/tmp/
          ssh ${{ env.LIGHTSAIL_USER }}@${{ env.LIGHTSAIL_HOST }} \
            "chmod +x /tmp/build_script.sh && export GITHUB_TOKEN='${{ secrets.COMMON_ACCESS_TOKEN }}' && /tmp/build_script.sh"

      - name: Deploy application container
        run: |
          ssh ${{ env.LIGHTSAIL_USER }}@${{ env.LIGHTSAIL_HOST }} << 'EOF'
            echo "üöÄ Deploying Mastra Test UI..."

            # Ensure Docker network exists
            sudo docker network create mastra-test-network --driver bridge 2>/dev/null || true

            # Set service and port
            SERVICE="${{ github.event.inputs.service }}"
            ENV_FILE="${{ github.event.inputs.environment }}"

            # Set port and container name based on service
            if [ "$SERVICE" = "fasthelp" ]; then
              PORT=3002
              CONTAINER_NAME="mastra-test-ui-fasthelp"
            else
              PORT=3001
              CONTAINER_NAME="mastra-test-ui"
            fi

            echo "Service: $SERVICE"
            echo "Port: $PORT"
            echo "Container name: $CONTAINER_NAME"
            echo "Deploying with environment: $ENV_FILE"

            # Store current image for rollback
            CURRENT_IMAGE=$(sudo docker inspect $CONTAINER_NAME --format='{{.Image}}' 2>/dev/null || echo "none")
            echo "Current image: $CURRENT_IMAGE"

            # Stop and remove existing container
            sudo docker stop $CONTAINER_NAME 2>/dev/null || true
            sudo docker rm $CONTAINER_NAME 2>/dev/null || true

            # Get registry container IP from network
            REGISTRY_IP=$(sudo docker inspect local-registry --format '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}')
            echo "Using registry at: $REGISTRY_IP:5000"

            # Debug: Check environment file before deployment (safe variables only)
            echo "üîç Environment file for container (non-sensitive vars only):"
            sudo grep -E "^(LOG_LEVEL|NEXT_PUBLIC_|ENABLE_)" "/opt/mastra-test-ui/.env.$ENV_FILE" || echo "No safe variables found"

            # Deploy container with environment-specific configuration
            echo "üöÄ Deploying with environment: $ENV_FILE"

            # Deploy container with env file
            sudo docker run -d \
              --name $CONTAINER_NAME \
              --network mastra-test-network \
              --restart unless-stopped \
              -p $PORT:$PORT \
              -e PORT=$PORT \
              --env-file "/opt/mastra-test-ui/.env.$ENV_FILE" \
              $REGISTRY_IP:5000/mastra-test-ui:$ENV_FILE-$SERVICE-latest

            # Debug: Check safe environment variables in running container
            echo "üîç Safe environment variables in container:"
            sudo docker exec $CONTAINER_NAME env | grep -E "^(LOG_LEVEL|NEXT_PUBLIC_|NODE_ENV|ENABLE_|PORT)" | sort || echo "No safe env vars found"

            # Clean up old images (keep running container image)
            sudo docker images "*mastra-test-ui*" --format "{{.ID}} {{.CreatedAt}}" | sort -k2 -r | tail -n +3 | awk '{print $1}' | xargs -r sudo docker rmi || true

            echo "‚úÖ Application deployed successfully"
          EOF

      - name: Verify deployment
        run: |
          ssh ${{ env.LIGHTSAIL_USER }}@${{ env.LIGHTSAIL_HOST }} << 'EOF'
            echo "üîç Verifying deployment..."

            # Set service and port
            SERVICE="${{ github.event.inputs.service }}"
            ENV_FILE="${{ github.event.inputs.environment }}"

            # Set port and container name based on service
            if [ "$SERVICE" = "fasthelp" ]; then
              PORT=3002
              CONTAINER_NAME="mastra-test-ui-fasthelp"
            else
              PORT=3001
              CONTAINER_NAME="mastra-test-ui"
            fi

            echo "Verifying service: $SERVICE on port: $PORT"

            echo "Checking container status..."
            sudo docker ps | grep $CONTAINER_NAME

            echo "Checking container logs..."
            sudo docker logs $CONTAINER_NAME --tail=20

            echo "Waiting for application to be ready..."
            HEALTH_CHECK_PASSED=false

            # Get basePath from environment file for health check
            echo "üîç Looking for basePath in: /opt/mastra-test-ui/.env.$ENV_FILE"

            if [ -f "/opt/mastra-test-ui/.env.$ENV_FILE" ]; then
              BASE_PATH=$(grep "NEXT_PUBLIC_BASE_PATH" "/opt/mastra-test-ui/.env.$ENV_FILE" | cut -d'=' -f2 || echo "")
              echo "üîç Found BASE_PATH: '$BASE_PATH'"
            else
              echo "‚ùå Environment file not found, using empty basePath"
              BASE_PATH=""
            fi

            HEALTH_URL="http://localhost:$PORT${BASE_PATH}/api/health"
            echo "üîç Using health check URL: $HEALTH_URL"

            # Check container status
            echo "üîç Container status:"
            sudo docker ps | grep $CONTAINER_NAME || echo "Container not found"

            # Wait for application to be ready with the correct health endpoint
            for i in {1..30}; do
              if curl -sf "$HEALTH_URL" >/dev/null 2>&1; then
                echo "‚úÖ Application health check passed"
                HEALTH_CHECK_PASSED=true
                break
              else
                if [ $i -eq 1 ]; then
                  echo "‚è≥ Waiting for application to start..."
                elif [ $((i % 10)) -eq 0 ]; then
                  echo "‚è≥ Still waiting for application... ($i/30)"
                fi
                sleep 2
              fi
            done

            # Rollback if health check failed
            if [ "$HEALTH_CHECK_PASSED" = "false" ]; then
              echo "‚ùå Health check failed. Rolling back..."
              sudo docker stop $CONTAINER_NAME 2>/dev/null || true
              sudo docker rm $CONTAINER_NAME 2>/dev/null || true

              if [ "$CURRENT_IMAGE" != "none" ] && [ -n "$CURRENT_IMAGE" ]; then
                echo "üîÑ Restoring previous container with image: $CURRENT_IMAGE"
                sudo docker run -d \
                  --name $CONTAINER_NAME \
                  --network mastra-test-network \
                  --restart unless-stopped \
                  -p $PORT:$PORT \
                  -e PORT=$PORT \
                  --env-file "/opt/mastra-test-ui/.env.$ENV_FILE" \
                  $CURRENT_IMAGE
                echo "üîÑ Rollback completed"
              else
                echo "‚ùå No previous image available for rollback (CURRENT_IMAGE: '$CURRENT_IMAGE')"
              fi
              exit 1
            fi

            echo "‚úÖ Deployment verification completed successfully"
          EOF